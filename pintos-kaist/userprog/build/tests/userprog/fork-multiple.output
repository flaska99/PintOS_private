Kernel command line: -q -f put fork-multiple run fork-multiple
0 ~ 9fc00 1
100000 ~ 1fe0000 1
Pintos booting with: 
	base_mem: 0x0 ~ 0x9fc00 (Usable: 639 kB)
	ext_mem: 0x100000 ~ 0x1fe0000 (Usable: 31,616 kB)
Calibrating timer...  65,433,600 loops/s.
hd0:0: detected 321 sector (160 kB) disk, model "QEMU HARDDISK", serial "QM00001"
hd0:1: detected 20,160 sector (9 MB) disk, model "QEMU HARDDISK", serial "QM00002"
hd1:0: detected 104 sector (52 kB) disk, model "QEMU HARDDISK", serial "QM00003"
Formatting file system...done.
Boot complete.
Putting 'fork-multiple' into the file system...
Executing 'fork-multiple':
(fork-multiple) begin
(fork-multiple) child run
child: exit(4)
(fork-multiple) Parent: child exit status is 4
(fork-multiple) child run
child: exit(5)
Interrupt 0x0d (#GP General Protection Exception) at rip=800421bf1b
 cr2=0000000000000000 error=               0
rax ccccccccccccc82c rbx 0000000000000000 rcx 00000000004034f2 rdx 0000000000000020
rsp 0000008004246eb0 rbp 0000008004246ef0 rsi 0000000000000000 rdi 0000008004246080
rip 000000800421bf1b r8 0000000000000000  r9 0000000000000000 r10 0000000000000000
r11 0000000000000216 r12 000000800421cef4 r13 0000000000000000 r14 0000000000000000
r15 0000000000000000 rflags 00000292
es: 001b ds: 001b cs: 0008 ss: 0010
Kernel PANIC at ../../userprog/exception.c:97 in kill(): Kernel bug - unexpected interrupt in kernel
Call stack: 0x8004217ed8 0x800421cc29 0x8004208d82 0x80042091a0 0x800421d279 0x800421cfa1 0x800421ce1d 0x40013b 0x4001b3 0x400229 0x400cca.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 90 ticks
Thread: 38 idle ticks, 35 kernel ticks, 17 user ticks
hd0:0: 0 reads, 0 writes
hd0:1: 87 reads, 236 writes
hd1:0: 104 reads, 0 writes
Console: 1835 characters output
Key